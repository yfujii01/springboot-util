// [使い方]
//
// このファイルを./gradle/に配置する
// ./gradle/build_jacoco.gradle
//
// build.gradleの先頭に以下を追加すること
// plugins { id "jacoco" }
//
// build.gradleの最後尾に以下を追加する
// apply from: 'gradle/build_jacoco.gradle'
//
// gradle test実行後に以下にレポートが出力される
// build/reports/jacoco/test/html/index.html

jacocoTestReport {
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(
				dir: it,
				exclude: '**/Application**'
			)
		})
	}
	reports {
		xml.enabled = true
		html.enabled = true
	}
	doLast {
		def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
		printCoverage(report)
	}
}

// テスト実行後にカバレッジレポートを出力する
test.finalizedBy 'jacocoTestReport'

def printCoverage(File xml) {
	if (!xml.exists()) return

	def parser = new XmlParser()
	parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
	parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
	def results = parser.parse(xml)

	def percentage = {
		def covered = it.'@covered' as Double
		def missed = it.'@missed' as Double
		((covered / (covered + missed)) * 100).round(2)
	}

	def counters = results.counter
	def metrics = [
		'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
		'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
		'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
		'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
		'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
		'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
	]

	logger.quiet("----- Code Coverage ----------")
	metrics.each { key, value -> logger.quiet(sprintf(" - %-11s: %6.2f%%", key, value)) }
	logger.quiet("------------------------------")
}
